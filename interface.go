package tentacle

import (
	"net"
	"time"
)

const (
	// SessionClose a session close
	SessionClose uint = iota
	// SessionOpen a session open
	SessionOpen
	// ListenClose a listener close
	ListenClose
	// ListenStarted a listener started
	ListenStarted
)

// ServiceEvent event generated by the Service
type ServiceEvent struct {
	Tag   uint
	Event interface{}
}

const (
	// DialerError when dial remote error
	DialerError uint = iota
	// ListenError when listen error
	ListenError
	// ProtocolSelectError Protocol select fail
	ProtocolSelectError
	// ProtocolError Protocol error during interaction
	ProtocolError
	// SessionTimeout After initializing the connection, the session does not open any protocol,
	// suspected fd attack
	SessionTimeout
	// MuxerError Multiplex protocol error
	MuxerError
	// ProtocolHandleError protocol handle error, will cause memory leaks/abnormal CPU usage
	ProtocolHandleError
)

// ProtocolHandleErrorInner is inner msg of this error
type ProtocolHandleErrorInner struct {
	PID ProtocolID
	// If SID == 0, it means that can not locate which session case this error
	SID SessionID
}

// ProtocolSelectErrorInner protocol select fail
type ProtocolSelectErrorInner struct {
	// Protocol name, if none, timeout or other net problem,
	// if Some, don't support this proto
	Name string
	// Session context
	Context *SessionContext
}

// ProtocolErrorInner protocol error during interaction
type ProtocolErrorInner struct {
	SID SessionID
	PID ProtocolID
	// Codec error
	Err error
}

// SessionTimeoutInner after initializing the connection, the session does not open any protocol,
// suspected fd attack
type SessionTimeoutInner struct {
	Context *SessionContext
}

// MuxerErrorInner multiplex protocol error
type MuxerErrorInner struct {
	Context *SessionContext
	Err     error
}

const (
	/*
		DialerErrorInner and ListenErrorInner tags
		but ListenErrorInner don't have `PeerIDNotMatch` and `HandshakeError` tag
	*/

	// RepeatedConnection connected to the connected peer, inner type SessionID
	RepeatedConnection uint = iota
	// PeerIDNotMatch when dial remote, peer id does not match
	PeerIDNotMatch
	// HandshakeError handshake error
	HandshakeError
	// TransportError transport error
	TransportError
	// IoError IO error
	IoError
)

// DialerErrorInner when dial remote error
type DialerErrorInner struct {
	Tag   uint
	Inner interface{}
	// remote addr
	Addr net.Addr
}

// ListenErrorInner when listen error
type ListenErrorInner struct {
	Tag   uint
	Inner interface{}
	// Listen address
	Addr net.Addr
}

// ServiceError error generated by the Service
type ServiceError struct {
	Tag   uint
	Event interface{}
}

// ServiceHandle is a handle to do something by service
//
// #### Behavior
//
// The handle that exists when the Service is created.
//
// Mainly handle some Service-level errors thrown at runtime, such as listening errors.
//
// At the same time, the session establishment and disconnection messages will also be perceived here.
type ServiceHandle interface {
	// Handling runtime errors
	HandleError(*ServiceContext, ServiceError)
	// Handling session establishment and disconnection events
	HandleEvent(*ServiceContext, ServiceEvent)
}

// ServiceProtocol is Service level protocol handle
//
// #### Behavior
//
// Define the behavior of each custom protocol in each state.
//
// Depending on whether the user defines a service handle or a session exclusive handle,
// the runtime has different performance.
//
// The **important difference** is that some state values are allowed in the service handle,
// and the handle exclusive to the session is "stateless", relative to the service handle,
// it can only retain the information between a protocol stream on and off.
//
// The opening and closing of the protocol will create and clean up the handle exclusive
// to the session, but the service handle will remain in the state until the service is closed.
//
type ServiceProtocol interface {
	// This function is called when the service start.
	//
	// The service handle will only be called once
	Init(*ProtocolContext)
	// Called when opening protocol
	Connected(ctx *ProtocolContextRef, version string)
	// Called when closing protocol
	Disconnected(*ProtocolContextRef)
	// Called when the corresponding protocol message is received
	Received(ctx *ProtocolContextRef, data []byte)
	// Called when the Service receives the notify task
	Notify(ctx *ProtocolContext, token uint64)
}

// SessionProtocol is Session level protocol handle
type SessionProtocol interface {
	// Called when opening protocol
	Connected(ctx *ProtocolContextRef, version string)
	// Called when closing protocol
	Disconnected(*ProtocolContextRef)
	// Called when the corresponding protocol message is received
	Received(ctx *ProtocolContextRef, data []byte)
	// Called when the session receives the notify task
	Notify(ctx *ProtocolContextRef, token uint64)
}

const (
	taskProtocolMessage uint = iota
	taskProtocolOpen
	taskProtocolClose
	taskSetProtocolNotify
	taskRemoveProtocolNotify
	taskSetProtocolSessionNotify
	taskRemoveProtocolSessionNotify
	taskDisconnect
	taskDial
	taskListen
	taskListenStart
	taskShutdown
)

// Task received by the Service.
//
// An instruction that the outside world can send to the service
type serviceTask struct {
	tag   uint
	event interface{}
}

type taskProtocolMessageInner struct {
	target TargetSession
	pid    ProtocolID
	data   []byte
}

type taskProtocolOpenInner struct {
	sid    SessionID
	target TargetProtocol
}

type taskProtocolCloseInner struct {
	sid SessionID
	pid ProtocolID
}

type taskDialInner struct {
	addr   net.Addr
	target TargetProtocol
}

type taskSetProtocolNotifyInner struct {
	pid      ProtocolID
	interval time.Duration
	token    uint64
}

type taskRemoveProtocolNotifyInner struct {
	pid   ProtocolID
	token uint64
}

type taskSetProtocolSessionNotifyInner struct {
	sid      SessionID
	pid      ProtocolID
	interval time.Duration
	token    uint64
}

type taskRemoveProtocolSessionNotifyInner struct {
	sid   SessionID
	pid   ProtocolID
	token uint64
}
